#!/bin/sh
# postinst script for salor-hospitality
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

. /usr/share/debconf/confmodule

case "$1" in
    configure)

      app_root=/usr/share/salor-hospitality
      export RAILS_ENV=production

      echo "postinst called with $1"

      echo "Reading configuration from Debconf database ..."
      db_get salor_hospitality/enter_username
      username=$RET
      echo "username is $username"
      db_get salor_hospitality/enter_password
      password=$RET
      echo "password is $password"
      db_get salor_hospitality/enter_database
      database=$RET
      echo "database is $database"

      cd $app_root
      /usr/bin/bundle install --deployment

      echo "Setting username and password for salor_hospitality database ..."
      #cp config/database-default.yml config/database.yml
      sed -i -e "s/username:.*/username: $username/" config/database.yml
      sed -i -e "s/password:.*/password: $password/" config/database.yml
      sed -i -e "s/database:.*/database: $database/" config/database.yml

      result=$(mysql -u $username -p$password -Bse 'show databases' | grep $database)
      if [ "$result" != "$database" ]
      then
        echo "salor_hospitality database doesn't exist, so I'm creating it ..."
        /usr/bin/rake db:create
        echo "Migrating salor_hospitality database ..."
        /usr/bin/rake db:migrate
        echo "Populating database with minimal seed data ..."
        SEED_MODE=minimal /usr/bin/rake db:seed
      else
        echo "salor_hospitality database already exists ..."
        echo "Migrating salor_hospitality database ..."
        /usr/bin/rake db:migrate
      fi
      
      #echo "Precompiling assets ..."
      #salor_rake assets:precompile

      echo "Updating vendors cache ..."
      /usr/bin/rake update_vendor_cache

      echo "Changing Permissions ..."
      chown -R www-data:www-data $app_root
      chmod -R 755 $app_root
      chmod -R 666 $app_root/tmp
      chmod -R 666 $app_root/log

      echo "Adding salor-hospitality to /etc/hosts if not yet there..."
      result=`cat /etc/hosts | grep -c 'salor-hospitality'`
      if [ $result -eq 0 ]; then
        echo "127.0.0.1 salor-hospitality" >> /etc/hosts;
      fi

      echo "Adding pcspkr to /etc/modules if not yet there..."
      result=`cat /etc/modules | grep -c 'pcspkr'`
      if [ $result -eq 0 ]; then
        echo "pcspkr" >> /etc/modules;
      fi

      echo "Restarting Apache ..."
      service apache2 restart 0>/dev/null 1>/dev/null 2>/dev/null 3>/dev/null
      echo "Restarting udev ..."
      service udev restart 0>/dev/null 1>/dev/null 2>/dev/null 3>/dev/null

      exit 0
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
