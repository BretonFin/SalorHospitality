#!/bin/bash
# postinst script for salor-hospitality
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

. /usr/share/debconf/confmodule

app_root=/usr/share/salor-hospitality/source

echo ""
echo "POSTINST called with $@"
echo "===================================="

echo "  Remove and purge old-instances"
db_get salor-hospitality/old-instances || true
gOldInstances="${RET}"
for lInstance in $gOldInstances; do
  echo "    Instance $lInstance"
  db_get salor-hospitality/instances/$lInstance/dbconfig-install || true
  if [ "$RET" = "true" ]; then
    ( . /usr/share/dbconfig-common/dpkg/prerm ; dbc_go salor-hospitality/instances/$lInstance remove )
    ( . /usr/share/dbconfig-common/dpkg/postrm ; dbc_go salor-hospitality/instances/$lInstance purge )
  fi
  
  if which ucf >/dev/null 2>&1; then
    ucf --purge /etc/salor-hospitality/$lInstance/database.yml
    ucf --purge /etc/salor-hospitality/$lInstance/config.yml
  fi
  rm -rf /etc/salor-hospitality/$lInstance
done
db_set salor-hospitality/old-instances ""

case "$1" in
  configure)
    echo "  postinst: Adding pcspkr to /etc/modules if not yet there..."
    result=`cat /etc/modules | grep 'pcspkr' | wc -l`
    if [ "$result" = "0" ]; then
      echo "pcspkr" >> /etc/modules;
    fi
  ;;

  abort-upgrade|abort-remove|abort-deconfigure)
  ;;

  *)
      echo "postinst called with unknown argument \`$1'" >&2
      exit 1
  ;;
esac


db_get salor-hospitality/current-instances || true
gInstances="${RET}"
for lInstance in $gInstances; do
  echo ""
  echo "               $lInstance"
  echo "  -----------------------------------"
  
  rails_etc=/etc/salor-hospitality/$lInstance
  rails_log=/var/log/salor-hospitality/$lInstance
  rails_cache=/var/cache/salor-hospitality/$lInstance
  rails_var=/var/lib/salor-hospitality/$lInstance

  echo "  postinst: creating directories"
  mkdir -p $rails_etc
  mkdir -p $rails_log
  mkdir -p $rails_cache
  mkdir -p $rails_var/public/uploads
  
  echo "  postinst: creating symlinks"
  ln -sf $app_root /usr/share/salor-hospitality/${lInstance}
  ln -sf $rails_var/pubilc/uploads $app_root/public/uploads/${lInstance}
  
  use_dbconfig=false
  
  db_get salor-hospitality/instances/$lInstance/dbconfig-install || true
  if [ "$RET" = "true" ]; then
    echo "  postinst: dbconfig-install is $RET. Setting use_dbconfig to TRUE"
    use_dbconfig=true
    db_get salor-hospitality/instances/$lInstance/dbconfig-reinstall || true
    if [ "$RET" = "false" ]; then
      echo "  postinst: dbconfig-reinstall is $RET"
      db_fget salor-hospitality/instances/$lInstance/dbconfig-reinstall seen || true
      if [ "$RET" = "true" ]; then
        echo "  postinst: dbconfig-reinstall seen is $RET. Setting use_dbconfig to FALSE."
        use_dbconfig=false
      fi
    fi
  fi
  
  if [ ! -f /etc/salor-hospitality/$lInstance/database.yml.lock ]; then
    database_config_yml_template="$app_root/config/database.yml.template"
    database_config_yml=$rails_etc/database.yml.new
    if [ $use_dbconfig = true ]; then
      echo "  postinst: generating database.yml configuration file"
      dbc_generate_include=template:$database_config_yml
      dbc_generate_include_args="-o template_infile=$database_config_yml_template"
      ucf --purge $database_config_yml
      ( . /usr/share/dbconfig-common/dpkg/postinst ; dbc_go salor-hospitality/instances/$lInstance $@ )
      ucf --purge $database_config_yml
      ucf --debconf-ok $database_config_yml /etc/salor-hospitality/$lInstance/database.yml
      chmod 660 /etc/salor-hospitality/$lInstance/database.yml
      rm -rf $database_config_yml
    fi
  fi
  
  case "$1" in
    configure|reconfigure)
 
      if [ $use_dbconfig = true ]; then
        # this file prevents dbconfig-common to ask for reconfiguration of the instance during dpkg-reconfigure. see config script.
        touch $rails_etc/database.yml.lock
      fi
      
      echo "  postinst: Deleting the asset cache"
      rm -rf $app_root/tmp/cache/assets
      
      if [ -e db/schema.rb ]; then
        echo "  postinst: Copying schema.rb to instance directory."
        cp db/schema.rb $rails_var
      fi
      if [ -e config/config.yml ]; then
        echo "  postinst: Copying config.yml to etc directory and registering as config file."
        cp config/config.yml $rails_etc
        ucf --debconf-ok config/config.yml $rails_etc/config.yml
        chmod 660 $rails_etc/config.yml
      fi
      
      
      if [ -e $rails_etc/database.yml ]; then
        echo "  postinst: this instance has a configure database."
        
        cd $app_root
        rm -rf $app_root/Gemfile.lock
        # The following is an ugly hack. Since this package can be installed into various distributions, we conditionally have to run `bundle install`. Beginning with Debian Jessie, all the required gems are present (package ruby-uglifier for the first time), so we need not run `bundle install`. If anyone knows a better solution for this, please email me at office@red-e.eu.
        if [ ! -e /usr/lib/ruby/vendor_ruby/uglifier.rb ]; then
          echo "  postinst: This is an older Debian version than Jessie. We have to run bundle install to get gems from rubygems.org."
          bundle install
        fi

        echo "  postinst: migrating the database. this may take a while."
        rake db:migrate RAILS_ENV=production SH_DEBIAN_SITEID="${lInstance}" > /dev/null
        echo "  postinst: running db:seed ..."
        rake1.9.1 db:seed SEED_MODE=minimal RAILS_ENV=production SH_DEBIAN_SITEID="${lInstance}" > /dev/null
        echo "  postinst: updating vendors cache ..."
        rake1.9.1 update_vendor_cache RAILS_ENV=production SH_DEBIAN_SITEID="${lInstance}" > /dev/null
      else
        echo "  postinst: $rails_etc/database.yml does not exist. Instance \"${lInstance}\" database must be configured manually."
      fi
      
      echo "  postinst: creating apache2 site configuration file..."
      apache_site_maintainer_config=/etc/apache2/sites-available/sh-${lInstance}-http
      cp $app_root/config/apache-site-http.template $apache_site_maintainer_config.maintainer
      sed -i "s/INSTANCE_ID/${lInstance}/" $apache_site_maintainer_config.maintainer
      ucf --debconf-ok $apache_site_maintainer_config.maintainer $apache_site_maintainer_config
      rm -rf $apache_site_maintainer_config.maintainer
      cd /etc/apache2/sites-enabled
      ln -sf ../sites-available/sh-${lInstance}-http sh-${lInstance}-http
      
      echo "  postinst: Adding salor-hospitality to /etc/hosts if not yet there..."
      result=`cat /etc/hosts | grep "${lInstance}.sh" | wc -l`
      if [ "$result" = "0" ]; then
        echo "127.0.0.1 ${lInstance}.sh" >> /etc/hosts;
      fi
      ;;

      abort-upgrade|abort-remove|abort-deconfigure)
      ;;

      *)
          echo "postinst called with unknown argument \`$1'" >&2
          exit 1
      ;;
  esac
done    
    
    
db_get salor-hospitality/user || true
app_user=$RET
echo "  postinst: changing ownership for user $app_user"
chown -R $app_user:$app_user $app_root
chown -R $app_user:$app_user /etc/salor-hospitality
chown -R $app_user:$app_user /var/log/salor-hospitality
chown -R $app_user:$app_user /var/cache/salor-hospitality
chown -R $app_user:$app_user /var/lib/salor-hospitality

echo "  postinst: changing permissions for user $app_user"
chmod 770 /etc/salor-hospitality
  
echo "  postinst: restarting Apache ..."
service apache2 restart 0>/dev/null 1>/dev/null 2>/dev/null 3>/dev/null
echo "  postinst: restarting udev ..."
service udev restart 0>/dev/null 1>/dev/null 2>/dev/null 3>/dev/null
      
# dh_installdeb will replace this special comment with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
