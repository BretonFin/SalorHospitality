#!/bin/bash
cd /etc/mysql

mycnf=/etc/mysql/my.cnf


echo "This script only configures replication of 1 database between two hosts: MASTER (the production machine) and SLAVE (the backup machine). Mysql does not support replication of several MASTERS to one SLAVE. Multiple Mysql instances are needed for that."

echo -ne "Please specify the administraive username of mysql (default is root): "
read mysql_admin_username
if [ "$mysql_admin_username" == "" ]; then mysql_admin_username="root"; fi

echo -ne "Please specify the administraive password of mysql (default is root): "
read mysql_admin_password
if [ "$mysql_admin_password" == "" ]; then mysql_admin_password="root"; fi

echo -ne "Please specify the server type {master|slave}: "
read servertype

if [ "$servertype" = "master" ]; then
  if [ ! -e master-crt.pem ]; then

    echo -ne "Please specify the passphrase for the SSL certificates (default is salor): "
    read passphrase
    if [ "$passphrase" == "" ]; then passphrase="salor"; fi

    openssl req -x509 -newkey rsa:2048 -keyout master-key-enc.pem -out master-crt.pem -subj '/DC=com/DC=example/CN=master' -passout pass:$passphrase
    
    openssl rsa -in master-key-enc.pem -out master-key.pem -passin pass:$passphrase -passout pass:
    
    openssl req -x509 -newkey rsa:2048 -keyout slave-key-enc.pem -out slave-crt.pem -subj '/DC=com/DC=example/CN=slave' -passout pass:$passphrase
    
    openssl rsa -in slave-key-enc.pem -out slave-key.pem -passin pass:$passphrase -passout pass:
  
    cat master-crt.pem slave-crt.pem > ca.pem
    
    echo "Certificate generation done. Now copy /etc/mysql/{slave-crt, slave-key, ca}.pem to /etc/mysql of SLAVE (secure copy via scp is advised)."
  else
    echo "Master keys already exist. Nothing to be done."
  fi
elif [ "$servertype" = "slave" ]; then
  if [ ! -e slave-crt.pem ]; then
    echo "Copy /etc/mysql/{ca-crt, slave-key, slave-crt}.pem from MASTER to /etc/mysql of this server and run this script again (secure copy via scp is advised)."
    exit 1
  else
    echo "SLAVE keys already exist. Nothing to be done."
  fi
else
  echo "Invalid input."
  exit 1
fi

if [ ! -e $mycnf.orig ]; then
  echo "Backing up my.cnf before modification."
  cp $mycnf $mycnf.orig
  
  echo -ne "Please specify the name of the database to be replicated (default is sh_default): "
  read database
  if [ "$database" == "" ]; then database="sh_default"; fi
  

  echo -ne "Please specify the replication username (default is salorreplicator): "
  read replication_username
  if [ "$replication_username" == "" ]; then replication_username="salorreplicator"; fi

  echo -ne "Please specify the replication password (default is xxx): "
  read replication_password
  if [ "$replication_password" == "" ]; then replication_password="xxx"; fi

  if [ "$servertype" = "master" ]; then
    echo -ne "Please specify the SLAVE IP or FQDM from which a login to this mysql server is allowed (default is %, meaning login allowed from everywhere): "
    read slave_host
    if [ "$slave_host" == "" ]; then slave_host="%"; fi

    sed -i 's/^bind-address/#bind-address/' $mycnf
    sed -i 's/#server-id.*$/server-id = 1/' $mycnf
    sed -i 's/#log_bin/log_bin/' $mycnf
    sed -i "s/#binlog_do_db.*$/binlog_do_db=${database}\\`echo -e '\n\r'`#binlog_do_db = include_database_name/" $mycnf
    
    sed -i "s/^#binlog_ignore_db.*$/relay-log = \/var\/lib\/mysql\/mysql-relay-bin\\`echo -e '\n\r'`relay-log-index = \/var\/lib\/mysql\/mysql-relay-bin.index/" $mycnf
    
    sed -i "s/# ssl-ca.*/ssl\\`echo -e '\n\r'`ssl-ca=\/etc\/mysql\/ca.pem/" $mycnf
    sed -i "s/# ssl-cert.*$/ssl-cert=\/etc\/mysql\/master-crt.pem/" $mycnf
    sed -i "s/# ssl-key.*$/ssl-key=\/etc\/mysql\/master-key.pem/" $mycnf

  elif [ "$servertype" = "slave" ]; then
  
    echo -ne "Please specify the MASTER IP or FQDM: "
    read master_host
    if [ "$master_host" == "" ]; then
      echo "Need master IP or FQDM. Exiting..."
      exit 1
    fi
    
    sed -i 's/#server-id.*$/server-id = 2/' $mycnf
    sed -i 's/#log_bin/log_bin/' $mycnf
    sed -i "s/#binlog_do_db.*$/binlog_do_db=${database}\\`echo -e '\n\r'`#binlog_do_db = include_database_name/" $mycnf
    
    sed -i "s/^#binlog_ignore_db.*$/relay-log = \/var\/lib\/mysql\/mysql-relay-bin\\`echo -e '\n\r'`relay-log-index = \/var\/lib\/mysql\/mysql-relay-bin.index\\`echo -e '\n\r'`master-host = ${master_host}\\`echo -e '\n\r'`master-user = ${replication_username}\\`echo -e '\n\r'`master-password = ${replication_password}\\`echo -e '\n\r'`report-host = 127.0.0.1/" $mycnf
    
    sed -i "s/# ssl-ca.*/ssl\\`echo -e '\n\r'`ssl-ca=\/etc\/mysql\/ca.pem/" $mycnf
    sed -i "s/# ssl-cert.*$/ssl-cert=\/etc\/mysql\/slave-crt.pem/" $mycnf
    sed -i "s/# ssl-key.*$/ssl-key=\/etc\/mysql\/slave-key.pem/" $mycnf
  fi

else
  echo "This script already has modified /etc/mysl/my.cnf. Not running twice. You have to manually inspect the changes."
fi

echo "restarting mysql"
service mysql restart

echo ""
echo "Check if mysql is now SSL enabled:"
echo ""
echo "show variables like '%ssl%';" | mysql -u ${mysql_admin_username} -p${mysql_admin_password}


if [ "$servertype" = "master" ]; then
  echo "Creating replication user and granting permission to replicate..."
  echo "CREATE USER '$replication_username'@'$slave_host' IDENTIFIED BY '$replication_password'; GRANT REPLICATION SLAVE ON *.* TO '$replication_username'@'$slave_host' REQUIRE SSL; FLUSH PRIVILEGES;" | mysql -u ${mysql_admin_username} -p${mysql_admin_password}
elif [ "$servertype" = "slave" ]; then
  echo "Setting SLAVE configuraiton."
  echo "STOP SLAVE; RESET SLAVE; CHANGE MASTER TO MASTER_SSL=1, MASTER_SSL_CA = '/etc/mysql/ca.pem', MASTER_SSL_CERT = '/etc/mysql/slave-crt.pem', MASTER_SSL_KEY = '/etc/mysql/slave-key.pem'; START SLAVE;" | mysql -u ${mysql_admin_username} -p${mysql_admin_password}
fi



# stop slave;
# reset slave;
# start slave;
#LOAD DATA FROM MASTER;