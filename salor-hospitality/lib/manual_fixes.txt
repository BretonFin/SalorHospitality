* A Update all quantities with article.category_id
* B Update all quantities with article.statistic_category_id
* C Update tax_items with CostCenter of Order (caused by split_items, FIXED in code by update_associations):
    DB fix:
    Settlement.all.each { |s| s.tax_items.existing.where(:cost_center_id => nil).each { |ti| ti.update_attribute :cost_center_id, ti.order.cost_center_id }}
* D Don't allow pressing refund twice, FIXED in code, DB only manually fixable
* E Update payment_method_items with CostCenter of Order (caused by ???):
    DB fix:
    Settlement.all.each { |s| s.payment_method_items.existing.where(:cost_center_id => nil).each { |pmi| pmi.update_attribute :cost_center_id, pmi.order.cost_center_id }}



Check if there are any orders without cost_center_id:
-------------------------------------------------
Settlement.all.collect { |s| s.id if  s.payment_method_items.existing.where(:cost_center_id => nil).any?}.uniq
Settlement.all.collect { |s| s.id if  s.tax_items.existing.where(:cost_center_id => nil).any?}.uniq
Settlement.all.collect { |s| s.id if  s.items.existing.where(:cost_center_id => nil).any?}.uniq # there are some
Settlement.all.collect { |s| s.id if  s.orders.existing.where(:cost_center_id => nil).any?}.uniq

Check if Order.TaxItem sum is identical with Order sum:
-------------------------------------------------
Settlement.find(626).orders.existing.collect { |o| o.id if o.sum.round(2) != o.tax_items.existing.where(:refunded => nil).sum(:gro).round(2) }.uniq

Check if Settlement.TaxItem sum is identical with Settlement.Order sum:
-------------------------------------------------
Settlement.find(626).tax_items.existing.where(:refunded => nil).sum(:gro).round(2) == Settlement.find(626).orders.existing.sum(:sum).round(2)



Check if Settlement.PaymentMethodItem sum is identical with Settlement.Order sum:
-------------------------------------------------
619.upto(619).collect { |i| s=Settlement.find_by_id(i);diff = (s.payment_method_items.existing.where(:cost_center_id => 1, :refunded => nil, :change => false).sum(:amount).round(2) - s.payment_method_items.existing.where(:cost_center_id => 1, :refunded => nil, :change => true).sum(:amount).round(2) - s.payment_method_items.existing.where(:cost_center_id => 1, :refunded => true).sum(:amount).round(2)).round(2) - s.orders.existing.where(:cost_center_id => 1).sum(:sum).round(2); "#{s.id}:#{diff}" unless diff.zero? }.uniq

"619:23.0", "625:31.200000000000045", "626:21.09999999999991"]



Check if Settlement.Order sum is identical with Settlement sum:
-------------------------------------------------
Settlement.find(627).orders.existing.sum(:sum).round(2) == Settlement.find(627).sum


D) Check if Order.PaymentMethodItem sum is identical with Order sum:
-------------------------------------------------
619.upto(619).collect { |i| Settlement.find(i).orders.existing.collect { |o| o.id unless o.cost_center.no_payment_methods == true or (o.sum.round(2) == ( o.payment_method_items.existing.where(:refunded => nil, :change => false).sum(:amount).round(2) - o.payment_method_items.existing.where(:refunded => nil, :change => true).sum(:amount).round(2) - o.payment_method_items.existing.where(:refunded => true).sum(:amount).round(2) ).round(2)) }.uniq }


Check if number of payment_method_items is sane
-----------------------------------------------
Settlement.find(627).payment_method_items.existing.count == Settlement.find(627).orders.existing.collect { |o| o.payment_method_items.existing.count }.sum

Check if there are any PaymentMethodItems that don't have a CostCenter attached:
-----------------------------------------------
